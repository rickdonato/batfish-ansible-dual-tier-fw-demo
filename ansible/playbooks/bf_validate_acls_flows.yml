---
- name: Validate ACL's and Flows
  hosts: localhost
  gather_facts: no

  vars:
    snapshot_path: "../data/snapshots/snapshot"
    snapshot_name: "dual_tier_fw_snapshot"
    network_name: "dual_tier_fw_network"
    bf_service: 172.29.236.139

  roles:
    - batfish.base

  tasks:

  - name: Setup BF Session
    bf_session:
      host: "{{ bf_service }}"
      name: batfish_endpoint

  - name: Initialize BF Snapshot
    bf_init_snapshot:
      network: "{{ network_name }}"
      snapshot: "{{ snapshot_name }}"
      snapshot_data: "{{ snapshot_path }}"
      overwrite: true

  - name: Validate Flows across Network
    bf_assert:
      assertions:
        - type: assert_all_flows_succeed
          name: Confirm that user can reach web server via tcp/80 received on FW1:GigEth0/0
          parameters:
            startLocation: '@enter(FW1[outside])'
            headers:
              srcIps: '0.0.0.0'
              dstIps: '10.0.1.1'
              dstPorts: '80'
              ipProtocols: 'tcp'

        - type: assert_all_flows_succeed
          name: Confirm that web server can reach db on tcp/3306 received on FW1:GigEth0/1
          parameters:
            startLocation: '@enter(FW1[webfarm])'
            headers:
              srcIps: '10.0.1.1'
              dstIps: '10.0.2.1'
              dstPorts: '3306'
              ipProtocols: 'tcp'

        - type: assert_all_flows_succeed
          name: Confirm that web server can reach public DNS/NTP server on FW1:GigEth0/1 
          parameters:
            startLocation: '@enter(FW1[webfarm])'
            headers:
              srcIps: '10.0.1.1'
              dstIps: '8.8.8.8'
              dstPorts: '53,123'
              ipProtocols: 'udp'

        - type: assert_all_flows_succeed
          name: Confirm that db can reach public DNS/NTP server on FW2:GigEth0/1
          parameters:
            startLocation: '@enter(FW2[db])'
            headers:
              srcIps: '10.0.2.1'
              dstIps: '8.8.8.8'
              dstPorts: '53,123'
              ipProtocols: 'udp'
         
    register: bf_assert
    ignore_errors: true

  - name: Display Batfish Validation Flow Results 
    debug: msg="{{ bf_assert }}"

  - name: Validate ACLs 
    bf_assert:
      assertions:
        - type: assert_filter_has_no_unreachable_lines
          name: Confirm that there are no unreachable lines
          parameters:
            filters: 'FW1["acl-outside", "acl-webfarm", "acl-inside"], FW2["acl-outside", "acl-db"]'

    register: bf_assert
    ignore_errors: true

  - name: Display Batfish Validation ACL Result Details
    debug: msg="{{ bf_assert }}"
